/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class drv_sp_jni_sp_dev_drv */

#ifndef _Included_drv_sp_jni_sp_dev_drv
#define _Included_drv_sp_jni_sp_dev_drv
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     drv_sp_jni_sp_dev_drv
 * Method:    SA_OpenSpectrometers
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_drv_sp_jni_sp_1dev_1drv_SA_1OpenSpectrometers
  (JNIEnv *, jclass);

/*
 * Class:     drv_sp_jni_sp_dev_drv
 * Method:    SA_OpenSpectrometersForSerial
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_drv_sp_jni_sp_1dev_1drv_SA_1OpenSpectrometersForSerial
  (JNIEnv *, jclass);

/*
 * Class:     drv_sp_jni_sp_dev_drv
 * Method:    SA_CloseSpectrometers
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_drv_sp_jni_sp_1dev_1drv_SA_1CloseSpectrometers
  (JNIEnv *, jclass);

/*
 * Class:     drv_sp_jni_sp_dev_drv
 * Method:    SA_GetAPIVersion
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_drv_sp_jni_sp_1dev_1drv_SA_1GetAPIVersion
  (JNIEnv *, jclass);

/*
 * Class:     drv_sp_jni_sp_dev_drv
 * Method:    SA_GetSpectrometersName
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_drv_sp_jni_sp_1dev_1drv_SA_1GetSpectrometersName
  (JNIEnv *, jclass, jint);

/*
 * Class:     drv_sp_jni_sp_dev_drv
 * Method:    SA_GetMaxIntegrationTime
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_drv_sp_jni_sp_1dev_1drv_SA_1GetMaxIntegrationTime
  (JNIEnv *, jclass, jint);

/*
 * Class:     drv_sp_jni_sp_dev_drv
 * Method:    SA_GetMinIntegrationTime
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_drv_sp_jni_sp_1dev_1drv_SA_1GetMinIntegrationTime
  (JNIEnv *, jclass, jint);

/*
 * Class:     drv_sp_jni_sp_dev_drv
 * Method:    SA_GetSoftwareVersion
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_drv_sp_jni_sp_1dev_1drv_SA_1GetSoftwareVersion
  (JNIEnv *, jclass, jint);

/*
 * Class:     drv_sp_jni_sp_dev_drv
 * Method:    SA_GetHardwareVersion
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_drv_sp_jni_sp_1dev_1drv_SA_1GetHardwareVersion
  (JNIEnv *, jclass, jint);

/*
 * Class:     drv_sp_jni_sp_dev_drv
 * Method:    SA_GetSerialNumber
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_drv_sp_jni_sp_1dev_1drv_SA_1GetSerialNumber
  (JNIEnv *, jclass, jint);

/*
 * Class:     drv_sp_jni_sp_dev_drv
 * Method:    SA_GetManufacturingDate
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_drv_sp_jni_sp_1dev_1drv_SA_1GetManufacturingDate
  (JNIEnv *, jclass, jint);

/*
 * Class:     drv_sp_jni_sp_dev_drv
 * Method:    SA_GetSpectrometerPixelsNumber
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_drv_sp_jni_sp_1dev_1drv_SA_1GetSpectrometerPixelsNumber
  (JNIEnv *, jclass, jint);

/*
 * Class:     drv_sp_jni_sp_dev_drv
 * Method:    SA_GetWavelengthCalibrationCoefficients
 * Signature: (I[D)I
 */
JNIEXPORT jint JNICALL Java_drv_sp_jni_sp_1dev_1drv_SA_1GetWavelengthCalibrationCoefficients
  (JNIEnv *, jclass, jint, jdoubleArray);

/*
 * Class:     drv_sp_jni_sp_dev_drv
 * Method:    SA_SetWavelengthCalibrationCoefficients
 * Signature: (I[D)I
 */
JNIEXPORT jint JNICALL Java_drv_sp_jni_sp_1dev_1drv_SA_1SetWavelengthCalibrationCoefficients
  (JNIEnv *, jclass, jint, jdoubleArray);

/*
 * Class:     drv_sp_jni_sp_dev_drv
 * Method:    SA_GetNonlinearCalibrationPixel
 * Signature: (I[FI[F[F)I
 */
JNIEXPORT jint JNICALL Java_drv_sp_jni_sp_1dev_1drv_SA_1GetNonlinearCalibrationPixel
  (JNIEnv *, jclass, jint, jfloatArray, jint, jfloatArray, jfloatArray);

/*
 * Class:     drv_sp_jni_sp_dev_drv
 * Method:    SA_SetNonlinearCalibrationPixel
 * Signature: (IFI[F[F)I
 */
JNIEXPORT jint JNICALL Java_drv_sp_jni_sp_1dev_1drv_SA_1SetNonlinearCalibrationPixel
  (JNIEnv *, jclass, jint, jfloat, jint, jfloatArray, jfloatArray);

/*
 * Class:     drv_sp_jni_sp_dev_drv
 * Method:    SA_GetSpectum
 * Signature: (I[DI)I
 */
JNIEXPORT jint JNICALL Java_drv_sp_jni_sp_1dev_1drv_SA_1GetSpectum
  (JNIEnv *, jclass, jint, jdoubleArray, jint);

/*
 * Class:     drv_sp_jni_sp_dev_drv
 * Method:    SA_GetSpectumHWTrigger
 * Signature: (I[DIII)I
 */
JNIEXPORT jint JNICALL Java_drv_sp_jni_sp_1dev_1drv_SA_1GetSpectumHWTrigger
  (JNIEnv *, jclass, jint, jdoubleArray, jint, jint, jint);

/*
 * Class:     drv_sp_jni_sp_dev_drv
 * Method:    SA_GetWavelength
 * Signature: (I[DI)I
 */
JNIEXPORT jint JNICALL Java_drv_sp_jni_sp_1dev_1drv_SA_1GetWavelength
  (JNIEnv *, jclass, jint, jdoubleArray, jint);

/*
 * Class:     drv_sp_jni_sp_dev_drv
 * Method:    SA_NonlinearCalibration
 * Signature: (I[D[DI)I
 */
JNIEXPORT jint JNICALL Java_drv_sp_jni_sp_1dev_1drv_SA_1NonlinearCalibration
  (JNIEnv *, jclass, jint, jdoubleArray, jdoubleArray, jint);

/*
 * Class:     drv_sp_jni_sp_dev_drv
 * Method:    SA_SetIntegrationTime
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_drv_sp_jni_sp_1dev_1drv_SA_1SetIntegrationTime
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     drv_sp_jni_sp_dev_drv
 * Method:    SA_SetAverageTimes
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_drv_sp_jni_sp_1dev_1drv_SA_1SetAverageTimes
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     drv_sp_jni_sp_dev_drv
 * Method:    SA_SetSpectumTriggerMode
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_drv_sp_jni_sp_1dev_1drv_SA_1SetSpectumTriggerMode
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     drv_sp_jni_sp_dev_drv
 * Method:    SA_SetXenonFlashPara
 * Signature: (IIIII)I
 */
JNIEXPORT jint JNICALL Java_drv_sp_jni_sp_1dev_1drv_SA_1SetXenonFlashPara
  (JNIEnv *, jclass, jint, jint, jint, jint, jint);

/*
 * Class:     drv_sp_jni_sp_dev_drv
 * Method:    SA_GetXenonFlashPara
 * Signature: (I[I)I
 */
JNIEXPORT jint JNICALL Java_drv_sp_jni_sp_1dev_1drv_SA_1GetXenonFlashPara
  (JNIEnv *, jclass, jint, jintArray);

/*
 * Class:     drv_sp_jni_sp_dev_drv
 * Method:    SA_XenonFlashDisable
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_drv_sp_jni_sp_1dev_1drv_SA_1XenonFlashDisable
  (JNIEnv *, jclass, jint);

/*
 * Class:     drv_sp_jni_sp_dev_drv
 * Method:    SA_XenonFlashEnable
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_drv_sp_jni_sp_1dev_1drv_SA_1XenonFlashEnable
  (JNIEnv *, jclass, jint);

/*
 * Class:     drv_sp_jni_sp_dev_drv
 * Method:    SA_WriteUserMemory
 * Signature: (IIII[B)I
 */
JNIEXPORT jint JNICALL Java_drv_sp_jni_sp_1dev_1drv_SA_1WriteUserMemory
  (JNIEnv *, jclass, jint, jint, jint, jint, jbyteArray);

/*
 * Class:     drv_sp_jni_sp_dev_drv
 * Method:    SA_ReadUserMemory
 * Signature: (IIII[B)I
 */
JNIEXPORT jint JNICALL Java_drv_sp_jni_sp_1dev_1drv_SA_1ReadUserMemory
  (JNIEnv *, jclass, jint, jint, jint, jint, jbyteArray);

#ifdef __cplusplus
}
#endif
#endif
